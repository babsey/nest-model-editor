{
  "neuron": "iaf_psc_alpha_json",
  "doc": "Name: iaf_psc_alpha_json - Leaky integrate-and-fire neuron model.\n\nDescription:\n\n  iaf_psc_alpha is an implementation of a leaky integrate-and-fire model\n  with alpha-function shaped synaptic currents. Thus, synaptic currents\n  and the resulting post-synaptic potentials have a finite rise time.\n\n  The threshold crossing is followed by an absolute refractory period\n  during which the membrane potential is clamped to the resting potential.\n\n  The linear subthresold dynamics is integrated by the Exact\n  Integration scheme [1]. The neuron dynamics is solved on the time\n  grid given by the computation step size. Incoming as well as emitted\n  spikes are forced to that grid.\n\n  An additional state variable and the corresponding differential\n  equation represents a piecewise constant external current.\n\n  The general framework for the consistent formulation of systems with\n  neuron like dynamics interacting by point events is described in\n  [1].  A flow chart can be found in [2].\n\n  Critical tests for the formulation of the neuron model are the\n  comparisons of simulation results for different computation step\n  sizes. sli/testsuite/nest contains a number of such tests.\n\n  The iaf_psc_alpha is the standard model used to check the consistency\n  of the nest simulation kernel because it is at the same time complex\n  enough to exhibit non-trivial dynamics and simple enough compute\n  relevant measures analytically.\n\nRemarks:\n\n  The present implementation uses individual variables for the\n  components of the state vector and the non-zero matrix elements of\n  the propagator.  Because the propagator is a lower triangular matrix\n  no full matrix multiplication needs to be carried out and the\n  computation can be done \"in place\" i.e. no temporary state vector\n  object is required.\n\n  The template support of recent C++ compilers enables a more succinct\n  formulation without loss of runtime performance already at minimal\n  optimization levels. A future version of iaf_psc_alpha will probably\n  address the problem of efficient usage of appropriate vector and\n  matrix objects.\n\nRemarks:\n\n  If tau_m is very close to tau_syn_ex or tau_syn_in, the model\n  will numerically behave as if tau_m is equal to tau_syn_ex or\n  tau_syn_in, respectively, to avoid numerical instabilities.\n  For details, please see IAF_Neruons_Singularity.ipynb in\n  the NEST source code (docs/model_details).\n\nReferences:\n  [1] Rotter S & Diesmann M (1999) Exact simulation of time-invariant linear\n      systems with applications to neuronal modeling. Biologial Cybernetics\n      81:381-402.\n  [2] Diesmann M, Gewaltig M-O, Rotter S, & Aertsen A (2001) State space\n      analysis of synchronous spiking in cortical neural networks.\n      Neurocomputing 38-40:565-571.\n  [3] Morrison A, Straube S, Plesser H E, & Diesmann M (2006) Exact subthreshold\n      integration with continuous spike times in discrete time neural network\n      simulations. Neural Computation, in press\n\nSends: SpikeEvent\n\nReceives: SpikeEvent, CurrentEvent, DataLoggingRequest\nFirstVersion: September 1999\nAuthor:  Diesmann, Gewaltig\nSeeAlso: iaf_psc_delta, iaf_psc_exp, iaf_cond_exp",
  "state": "r integer # counts number of tick during the refractory period",
  "initial_values": "V_abs mV = 0 mV\nfunction V_m mV = V_abs + E_L # Membrane potential.",
  "equations": "shape I_shape_in = pA * (e/tau_syn_in) * t * exp(-1/tau_syn_in*t)\nshape I_shape_ex = pA * (e/tau_syn_ex) * t * exp(-1/tau_syn_ex*t)\nfunction I pA = convolve(I_shape_in, in_spikes) + convolve(I_shape_ex, ex_spikes) + I_e + currents\nV_abs' = -1/Tau * V_abs + 1/C_m * I" ,
  "parameters": "C_m pF = 250 pF # Capacity of the membrane\nTau ms = 10 ms # Membrane time constant.\ntau_syn_in ms = 2 ms # Time constant of synaptic current.\ntau_syn_ex ms = 2 ms # Time constant of synaptic current.\nt_ref ms = 2 ms # Duration of refractory period.\nE_L mV = -70 mV # Resting potential.\nfunction V_reset mV = -70 mV - E_L # Reset potential of the membrane.\nfunction Theta mV = -55 mV - E_L # Spike threshold.\nI_e pA = 0 pA # Constant external input current.",
  "internals": "RefractoryCounts integer = steps(t_ref) # refractory time in steps",
  "input": "ex_spikes pA <- excitatory spike\nin_spikes pA <- inhibitory spike\ncurrents <- current",
  "output": "spike",
  "update": "if r == 0: # neuron not refractory\nintegrate_odes()\nelse: # neuron is absolute refractory\nr = r - 1\nend\nif V_abs >= Theta: # threshold crossing\n# A supra-threshold membrane potential should never be observable.\n# The reset at the time of threshold crossing enables accurate\n# integration independent of the computation step size, see [2,3] for\n# details.\nr = RefractoryCounts\nV_abs = V_reset\nemit_spike()\nend"
}
